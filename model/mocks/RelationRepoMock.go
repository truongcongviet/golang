package mocks

import mock "github.com/stretchr/testify/mock"

// RelationRepo is an autogenerated mock type for the RelationRepo type
type RelationRepo struct {
	mock.Mock
}

// AddRelation provides a mock function with given fields: ids, status
func (_m *RelationRepo) AddRelation(ids []string, status string) (bool, error) {
	ret := _m.Called(ids, status)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string) bool); ok {
		r0 = rf(ids, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIfExist provides a mock function with given fields: id1, id2, status
func (_m *RelationRepo) CheckIfExist(id1 string, id2 string, status string) bool {
	ret := _m.Called(id1, id2, status)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(id1, id2, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetEmailByStatus provides a mock function with given fields: id, status
func (_m *RelationRepo) GetEmailByStatus(id string, status string) ([]string, error) {
	ret := _m.Called(id, status)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdFromEmail provides a mock function with given fields: email
func (_m *RelationRepo) GetIdFromEmail(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetrivableEmails provides a mock function with given fields: id
func (_m *RelationRepo) GetRetrivableEmails(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
