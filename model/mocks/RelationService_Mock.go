package mocks

import (
	model "friend-management-v1/model"

	mock "github.com/stretchr/testify/mock"
)

// RelationService is an autogenerated mock type for the RelationService type
type RelationService struct {
	mock.Mock
}

// Addfriend provides a mock function with given fields: rq
func (_m *RelationService) Addfriend(rq model.AddAndGetCommonRequest) (bool, error) {
	ret := _m.Called(rq)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.AddAndGetCommonRequest) bool); ok {
		r0 = rf(rq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AddAndGetCommonRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockEmail provides a mock function with given fields: rq
func (_m *RelationService) BlockEmail(rq model.SubcribeAndBlockRequest) (bool, error) {
	ret := _m.Called(rq)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.SubcribeAndBlockRequest) bool); ok {
		r0 = rf(rq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.SubcribeAndBlockRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonFriends provides a mock function with given fields: rq
func (_m *RelationService) GetCommonFriends(rq model.AddAndGetCommonRequest) ([]string, error) {
	ret := _m.Called(rq)

	var r0 []string
	if rf, ok := ret.Get(0).(func(model.AddAndGetCommonRequest) []string); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AddAndGetCommonRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriendsEmail provides a mock function with given fields: rq
func (_m *RelationService) GetFriendsEmail(rq model.GetFriendsRequest) ([]string, error) {
	ret := _m.Called(rq)

	var r0 []string
	if rf, ok := ret.Get(0).(func(model.GetFriendsRequest) []string); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.GetFriendsRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveContactEmail provides a mock function with given fields: rq
func (_m *RelationService) RetrieveContactEmail(rq model.RetrieveRequest) ([]string, error) {
	ret := _m.Called(rq)

	var r0 []string
	if rf, ok := ret.Get(0).(func(model.RetrieveRequest) []string); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RetrieveRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubcribeToEmail provides a mock function with given fields: rq
func (_m *RelationService) SubcribeToEmail(rq model.SubcribeAndBlockRequest) (bool, error) {
	ret := _m.Called(rq)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.SubcribeAndBlockRequest) bool); ok {
		r0 = rf(rq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.SubcribeAndBlockRequest) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
